@model List<string>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Поиск рецептов</title>
    <link href="/css/site.css" rel="stylesheet" />
    <style>
        .ingredient-tag {
            display: inline-block;
            background: #e0e0e0;
            padding: 5px 10px;
            margin: 5px;
            border-radius: 15px;
        }
        .remove-ingredient {
            margin-left: 5px;
            cursor: pointer;
            background: none;
            border: none;
            color: #ff0000;
        }
        #ingredient-dropdown {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            width: 300px;
        }
        .dropdown-item {
            padding: 8px 12px;
            cursor: pointer;
        }
        .dropdown-item:hover {
            background-color: #f5f5f5;
        }
        .recipe {
            border: 1px solid #ddd;
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
        }
        #loading-spinner {
            display: none;
            margin: 20px;
        }
        .missing-ingredient {
            color: #d32f2f;
            font-style: italic;
            margin: 8px 0;
        }
        .ingredients-list, .instructions-list {
            margin: 15px 0;
            padding-left: 20px;
        }
        .ingredients-list li, .instructions-list li {
            margin-bottom: 5px;
        }
        .recipe-image {
            max-width: 100%;
            height: auto;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        .section-title {
            font-weight: bold;
            margin-top: 15px;
            color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Поиск рецептов</h1>

        <div class="search-section">
            <div class="selected-ingredients">
                <label>Выбранные ингредиенты:</label>
                <div id="selected-ingredients-container"></div>
            </div>

            <div class="ingredient-input">
                <label for="ingredient-input">Добавить ингредиент:</label>
                <input id="ingredient-input" type="text" placeholder="Начните вводить..." />
                <div id="ingredient-dropdown"></div>
            </div>

            <div id="loading-spinner" class="hidden">Поиск рецептов...</div>
        </div>

        <div id="results" class="results-container"></div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            const selectedIngredients = new Set();
            const allIngredients = @Html.Raw(Json.Serialize(Model));

            // Поиск ингредиентов при вводе
            $('#ingredient-input').on('input', function () {
                const query = $(this).val().toLowerCase();
                if (query.length < 2) {
                    $('#ingredient-dropdown').empty();
                    return;
                }

                const filtered = allIngredients.filter(i => i.toLowerCase().includes(query));
                updateDropdown(filtered);
            });

            // Добавление ингредиента и автоматический поиск
            $(document).on('click', '.dropdown-item', function () {
                const ingredient = $(this).text();
                if (!selectedIngredients.has(ingredient)) {
                    selectedIngredients.add(ingredient);
                    updateSelectedIngredients();
                    searchRecipes();
                }
                $('#ingredient-input').val('').focus();
                $('#ingredient-dropdown').empty();
            });

            // Удаление ингредиента и автоматический поиск
            $(document).on('click', '.remove-ingredient', function () {
                const ingredient = $(this).data('ingredient');
                selectedIngredients.delete(ingredient);
                updateSelectedIngredients();
                if (selectedIngredients.size > 0) {
                    searchRecipes();
                } else {
                    $('#results').empty();
                }
            });

            function searchRecipes() {
                const ingredients = Array.from(selectedIngredients);
                console.log('Searching for:', ingredients);

                $.ajax({
                    url: '/Recipe/SearchWithMissing',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(ingredients),
                    success: function (response) {
                        console.log('Server response:', response);
                        
                        try {
                            const recipes = typeof response === 'string' ? JSON.parse(response) : response;
                            
                            if (Array.isArray(recipes)) {
                                displayRecipes(recipes);
                            } else if (recipes.data && Array.isArray(recipes.data)) {
                                displayRecipes(recipes.data);
                            } else {
                                throw new Error('Неверный формат данных рецептов');
                            }
                        } catch (e) {
                            console.error('Error parsing response:', e);
                            $('#results').append('<p>Ошибка при обработке данных с сервера</p>');
                        }
                    },
                    error: function (xhr) {
                        console.error('Error details:', xhr.responseText);
                        $('#results').append('<p>Ошибка при загрузке рецептов</p>');
                    }
                });
            }

            function updateSelectedIngredients() {
                const container = $('#selected-ingredients-container');
                container.empty();
                selectedIngredients.forEach(ingredient => {
                    container.append(`
                        <span class="ingredient-tag">
                            ${ingredient}
                            <button class="remove-ingredient" data-ingredient="${ingredient}">×</button>
                        </span>
                    `);
                });
            }

            function updateDropdown(items) {
                const dropdown = $('#ingredient-dropdown');
                dropdown.empty();
                
                if (items.length > 0) {
                    items.slice(0, 10).forEach(item => {
                        dropdown.append(`<div class="dropdown-item">${item}</div>`);
                    });
                } else {
                    dropdown.append('<div class="dropdown-item">Ничего не найдено</div>');
                }
            }

            function displayRecipes(recipes) {
                const resultsDiv = $('#results');
                
                // Не очищаем результаты, а добавляем новые
                const newResults = $('<div>').attr('id', 'new-results');

                if (!Array.isArray(recipes)) {
                    newResults.append('<p>Ошибка: неверный формат данных рецептов</p>');
                    return;
                }

                if (recipes.length === 0) {
                    newResults.append('<p>По вашим критериям рецептов не найдено.</p>');
                } else {
                    recipes.forEach(recipe => {
                        try {
                            const cookingTime = recipe.cookingTime || recipe.cooking_time_minutes 
                                ? `${recipe.cookingTime || recipe.cooking_time_minutes} минут` 
                                : 'не указано';
                            
                            let missingHtml = '';
                            const missingIngredients = Array.isArray(recipe.missingIngredients) ? recipe.missingIngredients : [];
                            if (missingIngredients.length > 0) {
                                const missingText = missingIngredients.length === 1 
                                    ? `Не хватает: ${missingIngredients[0]}`
                                    : `Не хватает: ${missingIngredients.join(', ')}`;
                                
                                missingHtml = `<p class="missing-ingredient">${missingText}</p>`;
                            }

                            let ingredientsHtml = '';
                            const ingredients = Array.isArray(recipe.ingredients) ? recipe.ingredients : [];
                            if (ingredients.length > 0) {
                                ingredientsHtml = `
                                    <div class="section-title">Ингредиенты:</div>
                                    <ul class="ingredients-list">
                                        ${ingredients.map(ing => `<li>${ing}</li>`).join('')}
                                    </ul>
                                `;
                            }

                            let instructionsHtml = '';
                            let instructions = [];
                            
                            if (typeof recipe.instructions === 'string' && recipe.instructions.startsWith('System.Collections.Generic.List')) {
                                try {
                                    const match = recipe.instructions.match(/\[(.*?)\]/);
                                    if (match && match[1]) {
                                        instructions = match[1].split(',').map(item => item.trim());
                                    }
                                } catch (e) {
                                    console.error('Error parsing List format:', e);
                                }
                            }
                            else if (typeof recipe.instructions === 'string') {
                                instructions = recipe.instructions.split('\n').filter(step => step.trim() !== '');
                            } 
                            else if (Array.isArray(recipe.instructions)) {
                                instructions = recipe.instructions;
                            }
                            else if (recipe.instructions && typeof recipe.instructions === 'object') {
                                instructions = Object.values(recipe.instructions);
                            }

                            if (instructions.length > 0) {
                                instructionsHtml = `
                                    <div class="section-title">Способ приготовления:</div>
                                    <ol class="instructions-list">
                                        ${instructions.map(step => `<li>${step}</li>`).join('')}
                                    </ol>
                                `;
                            }

                            newResults.append(`
                                <div class="recipe">
                                    <h3>${recipe.name || recipe.title || 'Без названия'}</h3>
                                    ${recipe.photo || recipe.photo_link 
                                        ? `<img src="${recipe.photo || recipe.photo_link}" alt="${recipe.name || recipe.title || ''}" class="recipe-image" />` 
                                        : ''}
                                    <p>Время приготовления: ${cookingTime}</p>
                                    ${missingHtml}
                                    ${ingredientsHtml}
                                    ${instructionsHtml}
                                    ${recipe.url ? `<a href="${recipe.url}" target="_blank" class="btn btn-secondary">Открыть рецепт</a>` : ''}
                                </div>
                            `);
                        } catch (e) {
                            console.error('Error displaying recipe:', e, recipe);
                            newResults.append(`<div class="recipe"><h3>Ошибка при отображении рецепта</h3><p>${e.message}</p></div>`);
                        }
                    });
                }

                // Заменяем старые результаты новыми
                resultsDiv.html(newResults.html());
            }
        });
    </script>
</body>
</html>